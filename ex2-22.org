* Exercise 2.22

** Question
   The answer is in reverse order, why?

#+BEGIN_SRC scheme
  (define (square-list items)
    (define (iter things answer)
      (if (null? things)
          answer
          (iter (cdr things)
                (cons (square (car things)) answer))))
    (iter items nil))
#+END_SRC

** Answer
#+BEGIN_SRC scheme
  (square-list (list 1 2 3)
  (iter (list 1 2 3) nil)
  (iter (list 2 3) (cons 1 nil))
  (iter (list 3) (cons 2 (cons 1 nil)))
  (iter (list) (cons 3 (cons 2 (cons 1 nil))))
  ;; (null? things) -> #t
  (list 3 2 1)
#+END_SRC

  And the result of the second version is:

#+BEGIN_SRC scheme
  (square-list (list 1 2 3))
  (iter (list 2 3 4) (cons 1 nil))
  (iter (list 3 4) (cons (cons 1 nil) 4)
  (iter (list 4) (cons (cons (cons 1 nil) 4) 9))
  (iter '() (cons (cons (cons (cons nil 1) 4) 9) 16))
#+END_SRC

