#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.5 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 197 110 195 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 224 33 29 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 79 151 215 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.5 0.5 0.5 1 1 1 216 216 216 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 138 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 79 151 215 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 42 161 174 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 45 149 116 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 42 161 174 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 164 91 173 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 205 92 92 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 105 105 105 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 224 33 29 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 220 117 47 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 79 151 215 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 220 117 47 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 242 36 31 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 242 36 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 68 0 160 0 0 0 -1 -1
2 31 #"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 163 29 177 0 0 0 -1 -1 2
47 #"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 40 222 240 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 103 177 29 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 220 117 47 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 177 149 29 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 178 178 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1
          0 1857 0 29 3 10 #"#lang sicp"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";; environment"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"frame-vars"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"frame-vals"
0 0 26 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"bind!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"set-car!"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"set-cdr!"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"external-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         202 22 2 #"(\0"
2 #")\0"
39 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"c"
7 #"wxtext\0"
3 3 #"ond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vars"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vals"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"make-frame"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vars"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vals"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 27 #"\"Too many / Too few args: \""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vars"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vals"
7 #"wxtext\0"
3 3 #")])"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 4 #"loop"
0 0 26 3 2 #" ("
0 0 14 3 12 #"external-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 20 #"\"Unbound variable: \""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 5 #"scope"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 10 #"frame-vars"
0 0 26 3 1 #" "
0 0 14 3 5 #"scope"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                   ("
0 0 14 3 10 #"frame-vals"
0 0 26 3 1 #" "
0 0 14 3 5 #"scope"
0 0 26 3 6 #")))]))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"set-variable!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         427 22 2 #"(\0"
2 #")\0"
84 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 5 #"frame"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"first-frame"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"scan"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vars"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vals"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 5 #"null?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vars"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 5 #"bind!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"var"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"val"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"frame"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"            [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"var"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vars"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 8 #"set-car!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vals"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"val"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 4 #"scan"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"cdr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vars"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 3 #"cdr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"vals"
7 #"wxtext\0"
3 5 #"))]))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 4 #"scan"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"frame-vars"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"frame"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 10 #"frame-vals"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"frame"
7 #"wxtext\0"
3 3 #")))"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";; primitives in global-env"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"prims"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         377 22 2 #"(\0"
2 #")\0"
74 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"lis"
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"cdr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"cdr"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 2 #"))"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"prim-names"
0 0 26 3 3 #") ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"prims"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"prim-procs"
0 0 26 3 3 #") ("
0 0 14 3 3 #"map"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"p"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"prim"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 4 #"))) "
0 0 14 3 5 #"prims"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"setup-global-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 10 #"extend-env"
0 0 26 3 2 #" ("
0 0 14 3 10 #"prim-names"
0 0 26 3 3 #") ("
0 0 14 3 10 #"prim-procs"
0 0 26 3 2 #") "
0 0 14 3 9 #"empty-env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"primitive?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 4 #"prim"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"apply-prim"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 4 #"args"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 22 #";; syntax / expression"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 4 #"data"
0 0 26 3 1 #" "
0 0 14 3 3 #"tag"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         117 22 2 #"(\0"
2 #")\0"
22 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"pair?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"data"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"data"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"tag"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 1 #")"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"self-eval?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         127 22 2 #"(\0"
2 #")\0"
24 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"con"
7 #"wxtext\0"
3 1 #"d"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 7 #"number?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"exp"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"#t"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 7 #"string?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"exp"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"#t"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"#f"
7 #"wxtext\0"
3 2 #"])"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"var?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"quote?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"quote"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"text-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"lambda?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"  "
0 0 22 3 1 #"'"
0 0 16 3 6 #"lambda"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 14 3 6 #"params"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 6 #"params"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-proc"
0 0 26 3 1 #" "
0 0 14 3 6 #"params"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 26 3 1 #" "
0 0 14 3 6 #"params"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"func?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"func"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"func-var"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"func-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"cdadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"compound?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"proc-params"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"proc-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"proc-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"if?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 2 #"if"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"p-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"c-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"a-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"application?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"operator-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"operands-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 9 #";; define"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 7 #"define?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 16 3 6 #"define"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 16 #"define-variable!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 5 #"bind!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 8 #"set-car!"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 10 #"frame-vars"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #") ("
0 0 14 3 10 #"frame-vals"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 12 #"def-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         117 22 2 #"(\0"
2 #")\0"
22 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 7 #"symbol?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cadr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"exp"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 4 #"cadr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"exp"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"caadr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"exp"
7 #"wxtext\0"
3 2 #"))"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 9 #"def-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"cdadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-definition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 16 #"define-variable!"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 12 #"def-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 16 3 9 #"def-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 7 #";; set!"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"assignment?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"set-variable-value!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #") ("
0 0 14 3 4 #"loop"
0 0 26 3 2 #" ("
0 0 14 3 12 #"external-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"            [("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 4 #")) ("
0 0 14 3 8 #"set-car!"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 20 #"\"Unbound variable: \""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 10 #"frame-vars"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #") ("
0 0 14 3 10 #"frame-vals"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-assignment"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 19 #"set-variable-value!"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                       "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 8 #";; thunk"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"thunk?"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"thunk"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"evaluated-thunk?"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 14 #"evluated-thunk"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"thunk-exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"thunk-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"thunk-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"force-it"
0 0 26 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 1 #"("
0 0 18 3 4 #"defi"
0 0 18 3 1 #"n"
0 0 18 3 1 #"e"
0 0 18 3 2 #" ("
0 0 18 3 8 #"force-it"
0 0 18 3 5 #" obj)"
0 0 26 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 3 #"  ("
0 0 18 3 2 #"if"
0 0 18 3 2 #" ("
0 0 18 3 6 #"thunk?"
0 0 18 3 5 #" obj)"
0 0 26 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 7 #"      ("
0 0 18 3 12 #"actual-value"
0 0 18 3 2 #" ("
0 0 18 3 9 #"thunk-exp"
0 0 18 3 1 #" "
0 0 18 3 3 #"obj"
0 0 18 3 3 #") ("
0 0 18 3 9 #"thunk-env"
0 0 18 3 6 #" obj))"
0 0 26 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 11 #"      obj))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"force-it"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 6 #"thunk?"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 6 #"result"
0 0 26 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 26 3 2 #" ("
0 0 14 3 9 #"thunk-exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #") ("
0 0 14 3 9 #"thunk-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 4 #"))])"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 8 #"set-car!"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 15 #"evaluated-thunk"
0 0 26 3 2 #") "
0 0 18 3 12 #"; change tag"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 8 #"set-car!"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 2 #") "
0 0 14 3 6 #"result"
0 0 26 3 2 #") "
0 0 18 3 24 #"; replace exp with value"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 8 #"set-cdr!"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 26 3 4 #"()) "
0 0 18 3 12 #"; forget env"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"           "
0 0 14 3 6 #"result"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        [("
0 0 14 3 16 #"evaluated-thunk?"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #") ("
0 0 14 3 9 #"thunk-val"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 3 #"obj"
0 0 26 3 3 #"]))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"     "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"delay-it"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"thunk"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";; delayed if"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"eval-if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 26 3 2 #" ("
0 0 14 3 4 #"p-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 4 #"c-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 4 #"a-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"eval-list"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 22 3 1 #"'"
0 0 26 3 3 #"()]"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 18 3 19 #"; to get real value"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 9 #"eval-list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"uneval-list"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 22 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"delay-it"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 11 #"uneval-list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"operands"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"eval-seq"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         222 22 2 #"(\0"
2 #")\0"
43 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"con"
7 #"wxtext\0"
3 1 #"d"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 5 #"null?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"cdr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"exps"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"exps"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"exps"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 8 #"eval-seq"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"cdr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"exps"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 3 #")])"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"eval-func"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 10         122 22 2 #"(\0"
2 #")\0"
23 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"set"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 9 #"variable!"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"func-var"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"exp"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 18 #"                 ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"func-val"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"exp"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 17 #"                 "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #")"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 9 #";; 3 -> 3"
0 0 26 29 1 #"\n"
0 0 18 3 24 #";; x -> 4 ; car -> #proc"
0 0 26 29 1 #"\n"
0 0 18 3 29 #";; 'foo => (quote foo) -> foo"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";; (cond ...)"
0 0 26 29 1 #"\n"
0 0 18 3 32 #";; (lambda (x) (+ x 1)) -> #proc"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";; (+ 2 3 4)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"eval"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 10 #"self-eval?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"exp"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 4 #"var?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 6 #"quote?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 7 #"text-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 3 #"if?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 7 #"eval-if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 7 #"lambda?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 9 #"make-proc"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 16 3 7 #"define?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 15 #"eval-definition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 11 #"assignment?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 15 #"eval-assignment"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 5 #"func?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 9 #"eval-func"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 18 3 17 #";; lazy-eval here"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 12 #"application?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 10 #"meta-apply"
0 0 26 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 26 3 2 #" ("
0 0 14 3 11 #"operator-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 18 3 7 #"; force"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 11 #"operands-of"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 18 3 30 #"; not evaluating operands here"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                       "
0 0 14 3 3 #"env"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 30 #"\"Unknown type of expression: \""
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #")])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 48 #";; apply needs env to get the real-value of args"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"meta-apply"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 10 #"primitive?"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 10 #"apply-prim"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 9 #"eval-list"
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 4 #"))] "
0 0 18 3 7 #"; force"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 9 #"compound?"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 8 #"eval-seq"
0 0 26 3 2 #" ("
0 0 14 3 9 #"proc-body"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 14 3 10 #"extend-env"
0 0 26 3 2 #" ("
0 0 14 3 11 #"proc-params"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 34 #"                                 ("
0 0 14 3 11 #"uneval-list"
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 18 3 9 #"; delayed"
0 0 26 29 1 #"\n"
0 0 26 3 34 #"                                 ("
0 0 14 3 8 #"proc-env"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 5 #")))] "
0 0 18 3 7 #";; bind"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 21 #"\"Unkonwn procedure: \""
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 5 #")])))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";; test cases"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"global-env"
0 0 26 3 2 #" ("
0 0 14 3 16 #"setup-global-env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 4 #"eval"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 26 3 1 #"("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 1 #" "
0 0 22 3 1 #"2"
0 0 26 3 2 #") "
0 0 14 3 10 #"global-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 4 #"eval"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 26 3 1 #"("
0 0 14 3 1 #"*"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 1 #" "
0 0 22 3 1 #"2"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 22 3 1 #"3"
0 0 26 3 1 #" "
0 0 22 3 1 #"4"
0 0 26 3 1 #" "
0 0 22 3 1 #"5"
0 0 26 3 2 #") "
0 0 22 3 1 #"6"
0 0 26 3 2 #") "
0 0 14 3 10 #"global-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 4 #"eval"
0 0 26 3 1 #" "
0 0 22 3 1 #"'"
0 0 26 3 3 #"((("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"y"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #"))) "
0 0 22 3 1 #"3"
0 0 26 3 2 #") "
0 0 22 3 1 #"4"
0 0 26 3 2 #") "
0 0 14 3 10 #"global-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 7 #";; REPL"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"repl-loop"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 5 #"\"<<<\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 2 #"in"
0 0 26 3 2 #" ("
0 0 14 3 4 #"read"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 3 #"out"
0 0 26 3 2 #" ("
0 0 14 3 12 #"actual-value"
0 0 26 3 1 #" "
0 0 14 3 2 #"in"
0 0 26 3 1 #" "
0 0 14 3 10 #"global-env"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 5 #"\">>>\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 3 #"out"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 9 #"repl-loop"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 9 #"repl-loop"
0 0 26 3 1 #")"
0           0
