Exercise 1.10
=============

.. code-block:: scheme

    ; Ackermann's function
    (define (A x y)
        (cond ((= y 0) 0)
              ((= x 0) (* 2 y))
              ((=  y 1) 2)
              (else (A (- x 1) (A x (- y 1))))
        )
    )

    (A 1 10)
    (A 0 (A 1 9))
    (A 0 (A 0 (A 1 8)))
    ...
    (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))
    (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)
    ...
    2^10 = 1024
    ; (A 1 n) = 2^n

    (A 2 4)
    (A 1 (A 2 3))
    (A 1 (A 1 (A 2 2)))
    (A 1 (A 1 (A 1 (A 2 1))))
    (A 1 (A 1 (A 1 (2))))
    (A 1 (A 1 (2^2)))
    (A 1 (2^4))
    (2^16)
    65536    
    ; (A 2 n) = 2^2^...(n-1 times)
    ; 以 2 为底，求 n-1 次，2^2

    (A 3 3)
    (A 2 (A 3 2))
    (A 2 (A 2 (A 3 1)))
    (A 2 (A 2 2))
    (A 2 (A 1 (A 2 1)))
    (A 2 (A 1 2))
    (A 2 4)
    6553

观察几个定义，再用数学表示：

.. code-block:: scheme

    (define (f n) (A 0 n))
    >>> 2n

    (define (g n) (A 1 n))
    >>> 2^n

    (define (h n) (A 2 n))
    >>> 2 ^ (2^n)
