Exercise 1.9
============

下面的两个 procedures 均定义了 ``+`` ，其中， ``dec`` / ``inc``
的定义分别为自减/自增 1。

问：使用替换模型来说明，下面 2 个 procedures 计算 ``(+ 4 5)``
的过程。并且说明，它们的计算过程 (process) 是迭代的还是递归的？

.. code-block:: scheme

    (define (+ a b)
        (if (= a 0) b
            (inc (+ (dec a) b))
        )
    )

    (define (+ a b)
        (if (= a 0) b
            (+ (dec a) (inc b))
        )
    )

答：（两个过程都是递归的，因为它们的定义都调用了过程本身，但是）
第一个计算过程是递归的，第二个是迭代的。通过下面的求值替换模型可以看出来。

.. code-block:: scheme

    ; The first process
    (+ 4 5)
    (inc (+ 3 5))
    (inc (inc (+ 2 5)))
    (inc (inc (inc (+ 1 5))))
    (inc (inc (inc (inc (+ 0 5)))))
    (inc (inc (inc (inc 5))))
    (inc (inc (inc 6)))
    (inc (inc 7))
    (inc 8)
    9

    ; The second process
    (+ 4 5)
    (+ 3 6)
    (+ 2 7)
    (+ 1 8)
    (+ 0 9)
    9

另外还有一个判断计算过程递归或迭代的便利技巧：

    注意到第一个计算的定义，调用自身 ``+`` 是在定义的最后一行出现的，
    并且嵌在另一个表达式 ``inc`` 内。

    第二个定义中虽然也在定义末尾调用自身，但相反的，调用是在最外层的。
